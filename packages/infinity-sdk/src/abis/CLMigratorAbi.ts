export const CLMigratorAbi = [
  {
    type: 'constructor',
    inputs: [
      { name: '_WETH9', type: 'address', internalType: 'address' },
      { name: '_clPositionManager', type: 'address', internalType: 'address' },
      { name: '_permit2', type: 'address', internalType: 'contract IAllowanceTransfer' },
    ],
    stateMutability: 'nonpayable',
  },
  { type: 'receive', stateMutability: 'payable' },
  {
    type: 'function',
    name: 'WETH9',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'clPoolManager',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract ICLPoolManager' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'clPositionManager',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract ICLPositionManager' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'initializePool',
    inputs: [
      {
        name: 'poolKey',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          { name: 'currency0', type: 'address', internalType: 'Currency' },
          { name: 'currency1', type: 'address', internalType: 'Currency' },
          { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
          { name: 'poolManager', type: 'address', internalType: 'contract IPoolManager' },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      { name: 'sqrtPriceX96', type: 'uint160', internalType: 'uint160' },
    ],
    outputs: [{ name: 'tick', type: 'int24', internalType: 'int24' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'migrateFromV2',
    inputs: [
      {
        name: 'v2PoolParams',
        type: 'tuple',
        internalType: 'struct IBaseMigrator.V2PoolParams',
        components: [
          { name: 'pair', type: 'address', internalType: 'address' },
          { name: 'migrateAmount', type: 'uint256', internalType: 'uint256' },
          { name: 'amount0Min', type: 'uint256', internalType: 'uint256' },
          { name: 'amount1Min', type: 'uint256', internalType: 'uint256' },
        ],
      },
      {
        name: 'infiPoolParams',
        type: 'tuple',
        internalType: 'struct ICLMigrator.InfiCLPoolParams',
        components: [
          {
            name: 'poolKey',
            type: 'tuple',
            internalType: 'struct PoolKey',
            components: [
              { name: 'currency0', type: 'address', internalType: 'Currency' },
              { name: 'currency1', type: 'address', internalType: 'Currency' },
              { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
              { name: 'poolManager', type: 'address', internalType: 'contract IPoolManager' },
              { name: 'fee', type: 'uint24', internalType: 'uint24' },
              { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
          { name: 'tickLower', type: 'int24', internalType: 'int24' },
          { name: 'tickUpper', type: 'int24', internalType: 'int24' },
          { name: 'liquidityMin', type: 'uint256', internalType: 'uint256' },
          { name: 'recipient', type: 'address', internalType: 'address' },
          { name: 'deadline', type: 'uint256', internalType: 'uint256' },
          { name: 'hookData', type: 'bytes', internalType: 'bytes' },
        ],
      },
      { name: 'extraAmount0', type: 'uint256', internalType: 'uint256' },
      { name: 'extraAmount1', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'migrateFromV3',
    inputs: [
      {
        name: 'v3PoolParams',
        type: 'tuple',
        internalType: 'struct IBaseMigrator.V3PoolParams',
        components: [
          { name: 'nfp', type: 'address', internalType: 'address' },
          { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
          { name: 'liquidity', type: 'uint128', internalType: 'uint128' },
          { name: 'amount0Min', type: 'uint256', internalType: 'uint256' },
          { name: 'amount1Min', type: 'uint256', internalType: 'uint256' },
          { name: 'collectFee', type: 'bool', internalType: 'bool' },
          { name: 'deadline', type: 'uint256', internalType: 'uint256' },
        ],
      },
      {
        name: 'infiPoolParams',
        type: 'tuple',
        internalType: 'struct ICLMigrator.InfiCLPoolParams',
        components: [
          {
            name: 'poolKey',
            type: 'tuple',
            internalType: 'struct PoolKey',
            components: [
              { name: 'currency0', type: 'address', internalType: 'Currency' },
              { name: 'currency1', type: 'address', internalType: 'Currency' },
              { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
              { name: 'poolManager', type: 'address', internalType: 'contract IPoolManager' },
              { name: 'fee', type: 'uint24', internalType: 'uint24' },
              { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
          { name: 'tickLower', type: 'int24', internalType: 'int24' },
          { name: 'tickUpper', type: 'int24', internalType: 'int24' },
          { name: 'liquidityMin', type: 'uint256', internalType: 'uint256' },
          { name: 'recipient', type: 'address', internalType: 'address' },
          { name: 'deadline', type: 'uint256', internalType: 'uint256' },
          { name: 'hookData', type: 'bytes', internalType: 'bytes' },
        ],
      },
      { name: 'extraAmount0', type: 'uint256', internalType: 'uint256' },
      { name: 'extraAmount1', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'multicall',
    inputs: [{ name: 'data', type: 'bytes[]', internalType: 'bytes[]' }],
    outputs: [{ name: 'results', type: 'bytes[]', internalType: 'bytes[]' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  { type: 'function', name: 'pause', inputs: [], outputs: [], stateMutability: 'nonpayable' },
  {
    type: 'function',
    name: 'paused',
    inputs: [],
    outputs: [{ name: 'res', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'permit',
    inputs: [
      { name: 'owner', type: 'address', internalType: 'address' },
      {
        name: 'permitSingle',
        type: 'tuple',
        internalType: 'struct IAllowanceTransfer.PermitSingle',
        components: [
          {
            name: 'details',
            type: 'tuple',
            internalType: 'struct IAllowanceTransfer.PermitDetails',
            components: [
              { name: 'token', type: 'address', internalType: 'address' },
              { name: 'amount', type: 'uint160', internalType: 'uint160' },
              { name: 'expiration', type: 'uint48', internalType: 'uint48' },
              { name: 'nonce', type: 'uint48', internalType: 'uint48' },
            ],
          },
          { name: 'spender', type: 'address', internalType: 'address' },
          { name: 'sigDeadline', type: 'uint256', internalType: 'uint256' },
        ],
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'err', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'permit2',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract IAllowanceTransfer' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'permitBatch',
    inputs: [
      { name: 'owner', type: 'address', internalType: 'address' },
      {
        name: '_permitBatch',
        type: 'tuple',
        internalType: 'struct IAllowanceTransfer.PermitBatch',
        components: [
          {
            name: 'details',
            type: 'tuple[]',
            internalType: 'struct IAllowanceTransfer.PermitDetails[]',
            components: [
              { name: 'token', type: 'address', internalType: 'address' },
              { name: 'amount', type: 'uint160', internalType: 'uint160' },
              { name: 'expiration', type: 'uint48', internalType: 'uint48' },
              { name: 'nonce', type: 'uint48', internalType: 'uint48' },
            ],
          },
          { name: 'spender', type: 'address', internalType: 'address' },
          { name: 'sigDeadline', type: 'uint256', internalType: 'uint256' },
        ],
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'err', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'positionManagerPermit2',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract IAllowanceTransfer' }],
    stateMutability: 'view',
  },
  { type: 'function', name: 'refundETH', inputs: [], outputs: [], stateMutability: 'payable' },
  {
    type: 'function',
    name: 'selfPermitERC721',
    inputs: [
      { name: 'token', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
      { name: 'deadline', type: 'uint256', internalType: 'uint256' },
      { name: 'v', type: 'uint8', internalType: 'uint8' },
      { name: 'r', type: 'bytes32', internalType: 'bytes32' },
      { name: 's', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'selfPermitERC721IfNecessary',
    inputs: [
      { name: 'token', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
      { name: 'deadline', type: 'uint256', internalType: 'uint256' },
      { name: 'v', type: 'uint8', internalType: 'uint8' },
      { name: 'r', type: 'bytes32', internalType: 'bytes32' },
      { name: 's', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  { type: 'function', name: 'unpause', inputs: [], outputs: [], stateMutability: 'nonpayable' },
  {
    type: 'event',
    name: 'ExtraFundsAdded',
    inputs: [
      { name: 'currency0', type: 'address', indexed: false, internalType: 'address' },
      { name: 'currency1', type: 'address', indexed: false, internalType: 'address' },
      { name: 'extraAmount0', type: 'uint256', indexed: false, internalType: 'uint256' },
      { name: 'extraAmount1', type: 'uint256', indexed: false, internalType: 'uint256' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      { name: 'previousOwner', type: 'address', indexed: true, internalType: 'address' },
      { name: 'newOwner', type: 'address', indexed: true, internalType: 'address' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Paused',
    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Unpaused',
    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false,
  },
  { type: 'error', name: 'ContractLocked', inputs: [] },
  { type: 'error', name: 'EnforcedPause', inputs: [] },
  { type: 'error', name: 'INSUFFICIENT_AMOUNTS_RECEIVED', inputs: [] },
  { type: 'error', name: 'INSUFFICIENT_LIQUIDITY', inputs: [] },
  { type: 'error', name: 'INVALID_ETHER_SENDER', inputs: [] },
  { type: 'error', name: 'InvalidTick', inputs: [{ name: 'tick', type: 'int24', internalType: 'int24' }] },
  { type: 'error', name: 'NOT_TOKEN_OWNER', inputs: [] },
  { type: 'error', name: 'SafeCastOverflow', inputs: [] },
  {
    type: 'error',
    name: 'SafeCastOverflowedUintDowncast',
    inputs: [
      { name: 'bits', type: 'uint8', internalType: 'uint8' },
      { name: 'value', type: 'uint256', internalType: 'uint256' },
    ],
  },
  { type: 'error', name: 'TOKEN_NOT_MATCH', inputs: [] },
] as const
