/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Health check
     * @description Check the health status of the API and its dependencies
     */
    get: operations['getHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Readiness check
     * @description Check if the API is ready to serve requests
     */
    get: operations['getHealthReady']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health/live': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Liveness check
     * @description Check if the API is alive
     */
    get: operations['getHealthLive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all pools with pagination and filtering (v1)
     * @description Retrieve pools with advanced pagination and filtering options. Supports filtering by token mints, tick spacing, and custom ordering.
     */
    get: operations['getCachedV1Pools']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all pools with detailed info and pagination (v1)
     * @description Retrieve pools with detailed information (same format as /:address/details) with pagination and filtering options. Includes token metadata, volume metrics, configuration data, and poolType for each pool. Currently only concentrated pools are supported.
     */
    get: operations['getCachedV1PoolsInfoList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/mint': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pools by token pair (v1)
     * @description Retrieve pools that contain the specified token pair with detailed information (same format as /info/list). Searches for pools containing both tokens in either order.
     */
    get: operations['getCachedV1PoolsInfoMint']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pools info by IDs (v1)
     * @description Retrieve detailed pool information by pool IDs in Raydium-compatible format. Includes token metadata, pricing, volume metrics, and configuration data.
     */
    get: operations['getCachedV1PoolsInfoIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/{address}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get comprehensive pool details (v1)
     * @description Retrieve comprehensive pool details including token metadata, volume metrics for different periods, and full configuration data.
     */
    get: operations['getCachedV1PoolsByAddressDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/top/{limit}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get top pools by liquidity (v1)
     * @description Retrieve top pools ordered by liquidity with volume and TVL metrics. Optionally filter by token address - returns pools where the token is either token0 or token1.
     */
    get: operations['getCachedV1PoolsTopByLimit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/stats/overview': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pool statistics overview (v1)
     * @description Retrieve overall pool statistics including total liquidity, volume, fees, TVL USD, and pool count.
     */
    get: operations['getCachedV1PoolsStatsOverview']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/line/liquidity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pool liquidity timeline (v1)
     * @description Retrieve past 30 days of liquidity data for a specific pool. Returns daily liquidity values that can be used to create line charts.
     */
    get: operations['getCachedV1PoolsLineLiquidity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/line/position': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get position line data for a pool (v1)
     * @description Retrieve tick-level position data for a specific pool, including price, liquidity, and tick information. Data is sourced from the Tick table and ordered by tick index.
     */
    get: operations['getCachedV1PoolsLinePosition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/ohlcv/pair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get OHLCV volume data for a pool (v1)
     * @description Retrieve OHLCV (Open, High, Low, Close, Volume) volume data in USD for a specific pool. Returns volume-based OHLCV data calculated from pool volume and token USD prices. Supports multiple time intervals: 15m, 1H, 4H, 1D, 1W. If time_from and time_to are not provided, returns approximately 100 data points from the current time backwards.
     */
    get: operations['getCachedV1PoolsOhlcvPair']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/clmm-config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get CLMM configuration details (v1)
     * @description Retrieve CLMM (Concentrated Liquidity Market Maker) configuration details. If poolId is provided, returns config for that specific pool. Otherwise returns all available configurations.
     */
    get: operations['getCachedV1PoolsClmm-config']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/metadata/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token metadata by address (v1)
     * @description Retrieve token metadata (symbol, name, decimals, logo) by token mint address. Uses Metaplex API, Jupiter Token List, and Solscan as fallbacks.
     */
    get: operations['getCachedV1TokensMetadataByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/metadata/batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get metadata for multiple tokens (v1)
     * @description Retrieve metadata for multiple tokens in a single request. Uses Metaplex API with fallbacks. Maximum 50 addresses per request.
     */
    post: operations['postCachedV1TokensMetadataBatch']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/cache/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token cache statistics (v1)
     * @description Retrieve information about the token metadata cache
     */
    get: operations['getCachedV1TokensCacheStats']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/cache/clear': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Clear token cache (v1)
     * @description Clear the token metadata cache
     */
    delete: operations['deleteCachedV1TokensCacheClear']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token prices (v1)
     * @description Retrieve USD prices for multiple token addresses. Returns prices as key-value pairs where keys are token addresses and values are USD prices.
     */
    get: operations['getCachedV1TokensPrice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getHealthReady: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getHealthLive: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1Pools: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: string | number
        /** @description Number of pools per page (max 100) */
        limit?: string | number
        /** @description Filter by first token mint address */
        tokenMint0?: string
        /** @description Filter by second token mint address */
        tokenMint1?: string
        /** @description Filter by tick spacing */
        tickSpacing?: string | number
        /** @description Field to order by */
        orderBy?: 'liquidity' | 'total_fees_token0' | 'total_fees_token1' | 'sqrt_price_x64'
        /** @description Order direction */
        order?: 'asc' | 'desc'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
          'multipart/form-data': {
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
          'text/plain': {
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
        }
      }
    }
  }
  getCachedV1PoolsInfoList: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: string | number
        /** @description Number of pools per page (max 100) */
        limit?: string | number
        /** @description Filter by first token mint address */
        tokenMint0?: string
        /** @description Filter by second token mint address */
        tokenMint1?: string
        /** @description Filter by tick spacing */
        tickSpacing?: string | number
        /** @description Field to order by */
        orderBy?: 'liquidity' | 'total_fees_token0' | 'total_fees_token1' | 'sqrt_price_x64'
        /** @description Order direction */
        order?: 'asc' | 'desc'
        /** @description Filter by pool type. Currently only "concentrated" and "all" are supported and return the same results. */
        poolType?: 'all' | 'standard' | 'concentrated' | 'allFarm' | 'standardFarm' | 'concentratedFarm'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
          'text/plain': {
            success: boolean
            data: {
              /** @constant */
              poolState: 'Concentrated'
              tokenMint0: string | null
              tokenMint1: string | null
              sqrtPriceX64: string | null
              tokenVault0: string | null
              tokenVault1: string | null
              ammConfig: string | null
              observationKey: string | null
              mintDecimals0: (string | number) | null
              mintDecimals1: (string | number) | null
              tickSpacing: (string | number) | null
              liquidity: string | null
              tickCurrent: (string | number) | null
              feeGrowthGlobal0X64: string | null
              feeGrowthGlobal1X64: string | null
              protocolFeesToken0: string | null
              protocolFeesToken1: string | null
              totalFeesToken0: string | null
              totalFeesToken1: string | null
              fundFeesToken0: string | null
              fundFeesToken1: string | null
              recentEpoch: string | null
              price: string | null
              tvlUsd: string | null
              volume24h: string | null
              fees24h: string | null
              poolType: string | null
            }[]
            pagination: {
              /** @default 1 */
              page: string | number
              /** @default 20 */
              limit: string | number
              /** @default 0 */
              total: string | number
              /** @default 1 */
              totalPages: string | number
            }
          }
        }
      }
    }
  }
  getCachedV1PoolsInfoMint: {
    parameters: {
      query: {
        /** @description First token mint address */
        token0?: string
        /** @description Second token mint address */
        token1?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
            count: string | number
          }
          'multipart/form-data': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
            count: string | number
          }
          'text/plain': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
            count: string | number
          }
        }
      }
    }
  }
  getCachedV1PoolsInfoIds: {
    parameters: {
      query: {
        ids: string | string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
          }
          'multipart/form-data': {
            id: string
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
          }
          'text/plain': {
            id: string
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }[]
          }
        }
      }
    }
  }
  getCachedV1PoolsByAddressDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Pool state address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }
          }
          'text/plain': {
            success: boolean
            data: {
              /**
               * @default Concentrated
               * @enum {string}
               */
              type: 'Concentrated'
              programId: string
              mintA: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              mintB: {
                chainId: string | number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: string | number
                tags: string[] | null
                extensions: Record<string, never> | null
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
              }
              config: {
                id: string
                index: string | number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: string | number
                fundFeeRate: number
                defaultRange: number | null
                defaultRangePoint: number[] | null
              }
              poolType: string
            }
          }
        }
      }
    }
  }
  getCachedV1PoolsTopByLimit: {
    parameters: {
      query?: {
        /** @description Filter pools by token address (can be token0 or token1) */
        token?: string
      }
      header?: never
      path: {
        /** @description Number of top pools to return */
        limit: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @constant */
            poolState: 'Concentrated'
            tokenMint0: string | null
            tokenMint1: string | null
            sqrtPriceX64: string | null
            tokenVault0: string | null
            tokenVault1: string | null
            ammConfig: string | null
            observationKey: string | null
            mintDecimals0: (string | number) | null
            mintDecimals1: (string | number) | null
            tickSpacing: (string | number) | null
            liquidity: string | null
            tickCurrent: (string | number) | null
            feeGrowthGlobal0X64: string | null
            feeGrowthGlobal1X64: string | null
            protocolFeesToken0: string | null
            protocolFeesToken1: string | null
            totalFeesToken0: string | null
            totalFeesToken1: string | null
            fundFeesToken0: string | null
            fundFeesToken1: string | null
            recentEpoch: string | null
            price: string | null
            tvlUsd: string | null
            volume24h: string | null
            fees24h: string | null
            poolType: string | null
          }[]
          'multipart/form-data': {
            /** @constant */
            poolState: 'Concentrated'
            tokenMint0: string | null
            tokenMint1: string | null
            sqrtPriceX64: string | null
            tokenVault0: string | null
            tokenVault1: string | null
            ammConfig: string | null
            observationKey: string | null
            mintDecimals0: (string | number) | null
            mintDecimals1: (string | number) | null
            tickSpacing: (string | number) | null
            liquidity: string | null
            tickCurrent: (string | number) | null
            feeGrowthGlobal0X64: string | null
            feeGrowthGlobal1X64: string | null
            protocolFeesToken0: string | null
            protocolFeesToken1: string | null
            totalFeesToken0: string | null
            totalFeesToken1: string | null
            fundFeesToken0: string | null
            fundFeesToken1: string | null
            recentEpoch: string | null
            price: string | null
            tvlUsd: string | null
            volume24h: string | null
            fees24h: string | null
            poolType: string | null
          }[]
          'text/plain': {
            /** @constant */
            poolState: 'Concentrated'
            tokenMint0: string | null
            tokenMint1: string | null
            sqrtPriceX64: string | null
            tokenVault0: string | null
            tokenVault1: string | null
            ammConfig: string | null
            observationKey: string | null
            mintDecimals0: (string | number) | null
            mintDecimals1: (string | number) | null
            tickSpacing: (string | number) | null
            liquidity: string | null
            tickCurrent: (string | number) | null
            feeGrowthGlobal0X64: string | null
            feeGrowthGlobal1X64: string | null
            protocolFeesToken0: string | null
            protocolFeesToken1: string | null
            totalFeesToken0: string | null
            totalFeesToken1: string | null
            fundFeesToken0: string | null
            fundFeesToken1: string | null
            recentEpoch: string | null
            price: string | null
            tvlUsd: string | null
            volume24h: string | null
            fees24h: string | null
            poolType: string | null
          }[]
        }
      }
    }
  }
  getCachedV1PoolsStatsOverview: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            totalPools: string | number
            totalLiquidity: string
            totalVolume24h: string
            totalFees24h: string
            averageLiquidity: string
            totalTvlUsd: string
          }
          'multipart/form-data': {
            totalPools: string | number
            totalLiquidity: string
            totalVolume24h: string
            totalFees24h: string
            averageLiquidity: string
            totalTvlUsd: string
          }
          'text/plain': {
            totalPools: string | number
            totalLiquidity: string
            totalVolume24h: string
            totalFees24h: string
            averageLiquidity: string
            totalTvlUsd: string
          }
        }
      }
    }
  }
  getCachedV1PoolsLineLiquidity: {
    parameters: {
      query: {
        /** @description Pool ID to get liquidity timeline for */
        poolId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsLinePosition: {
    parameters: {
      query: {
        /** @description Pool ID to get position line data for */
        poolId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsOhlcvPair: {
    parameters: {
      query: {
        /** @description Pool ID to get OHLCV data for */
        poolId: string
        /** @description Time interval for OHLCV data */
        type?: '15m' | '1H' | '4H' | '1D' | '1W'
        /** @description Start time as Unix timestamp (seconds). If not provided, calculated automatically for ~100 data points. */
        time_from?: string
        /** @description End time as Unix timestamp (seconds). If not provided, uses current time. */
        time_to?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'getCachedV1PoolsClmm-config': {
    parameters: {
      query?: {
        /** @description Pool ID to get specific config for */
        poolId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1TokensMetadataByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Token mint address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
          'text/plain': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
        }
      }
    }
  }
  postCachedV1TokensMetadataBatch: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of token mint addresses */
          addresses: string[]
        }
        'multipart/form-data': {
          /** @description Array of token mint addresses */
          addresses: string[]
        }
        'text/plain': {
          /** @description Array of token mint addresses */
          addresses: string[]
        }
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: Record<string, never>
            count: number
          }
          'multipart/form-data': {
            success: boolean
            data: Record<string, never>
            count: number
          }
          'text/plain': {
            success: boolean
            data: Record<string, never>
            count: number
          }
        }
      }
    }
  }
  getCachedV1TokensCacheStats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
          'text/plain': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
        }
      }
    }
  }
  deleteCachedV1TokensCacheClear: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            message: string
          }
          'multipart/form-data': {
            success: boolean
            message: string
          }
          'text/plain': {
            success: boolean
            message: string
          }
        }
      }
    }
  }
  getCachedV1TokensPrice: {
    parameters: {
      query: {
        ids: string | string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'multipart/form-data': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'text/plain': {
            id: string
            success: boolean
            data: Record<string, never>
          }
        }
      }
    }
  }
}
